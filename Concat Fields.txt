1. **Create or Open a Transformation:**
   - Open Pentaho Data Integration and create a new transformation or open an existing one.

2. **Add Concat Fields Step:**
   - Drag and drop the "Concat Fields" step from the Design palette to your transformation canvas.

3. **Connect Input and Output:**
   - Connect the "Concat Fields" step to the previous step, which is typically a "Table Input" or another source of data.

4. **Configure Concat Fields Step:**
   - Double-click on the "Concat Fields" step to open its configuration window.

5. **Configure Field Concatenation:**
   - In the configuration window, you will see a grid where you can specify the fields you want to concatenate.
   - Add the fields you want to concatenate and define the order of concatenation.

6. **Specify Separator (Optional):**
   - You can specify a separator to be used between the concatenated fields. This is optional, and you can leave it blank if you don't want to use a separator.

7. **Define Output Field:**
   - Specify the name of the new field that will hold the concatenated values.

8. **Run the Transformation:**
   - Save your transformation and run it to see the concatenated results.

Here's a simple example of a transformation with a "Concat Fields" step:

```
   Input Fields:
   +--------+----------+
   | Field1 | Field2   |
   +--------+----------+
   | Value1 | Value2   |
   +--------+----------+

   Concat Fields Configuration:
   +-----------+-----------+-------------+
   | Field1    | Field2    | Separator   |
   +-----------+-----------+-------------+
   | Y         | Y         | , (comma)   |
   +-----------+-----------+-------------+

   Output Fields:
   +---------------------+
   | Concatenated_Field  |
   +---------------------+
   | Value1,Value2       |
   +---------------------+
```

In this example, "Concatenated_Field" is the new field that contains the concatenated values of "Field1" and "Field2" with a comma separator. Adjust the configuration based on your specific use case and field names.